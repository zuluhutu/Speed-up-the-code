Measure-Command{[System.Diagnostics.Process]::GetCurrentProcess().PriorityClass=[System.Diagnostics.ProcessPriorityClass]::RealTime;$f=$PSScriptRoot+'\plc_log.txt';$p=@('PLC_A','PLC_B','PLC_C','PLC_D');$e=@('Sandextrator overload','Conveyor misalignment','Valve stuck','Temperature warning');$s=@('OK','WARN','ERR');$c=50000;$d=[DateTime]::Now;$r=[System.Random]::new();$w=[System.IO.StreamWriter]::new($f);try{for($i=0;$i-lt$c;$i++){$t=$d.AddSeconds(-$i).ToString('yyyy-MM-dd HH:mm:ss');$l=$p[$r.Next(4)];$o=$r.Next(101,121);$b=$r.Next(1000,1101);$x=$s[$r.Next(3)];$m=[math]::Round($r.Next(60,110)+$r.NextDouble(),2);$a=$r.Next(0,101);if($r.Next(1,8)-eq4){$y=$e[$r.Next(4)];if($y-eq'Sandextractor overload'){$v=$r.Next(1,11);$w.WriteLine("ERROR; $t; $l; $y; $v; $x; $o; $b; $m; $a")}else{$w.WriteLine("ERROR; $t; $l; $y; ; $x; $o; $b; $m; $a")}}else{$w.WriteLine("INFO; $t; $l; System running normally; ; $x; $o; $b; $m; $a")}}}finally{$w.Close()}}
